
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}


model College {
  id        Int      @id @default(autoincrement())
  name      String
  acronym   String   @unique
  address   String
  city      String
  state     String
  zip       String
  latitude  Float
  longitude Float

  teams     Team[]
  matchesAsHome Match[] @relation("HomeMatches")
  matchesAsAway Match[] @relation("AwayMatches")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sport {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  preferredMatchDay String
  preferredMatchTime String

  teams     Team[]
}

model Team {
  id        Int     @id @default(autoincrement())
  name      String
  college   College @relation(fields: [collegeId], references: [id])
  collegeId Int
  sport     Sport   @relation(fields: [sportId], references: [id])
  sportId   Int

  matchesAsHome Match[] @relation("TeamHome")
  matchesAsAway Match[] @relation("TeamAway")
}

enum MatchStatus {
  Scheduled
  Completed
  Canceled
}

model Match {
  id        Int     @id @default(autoincrement())
  date      DateTime
  location  String

  homeTeam   Team @relation("TeamHome", fields: [homeTeamId], references: [id])
  homeTeamId Int

  awayTeam   Team @relation("TeamAway", fields: [awayTeamId], references: [id])
  awayTeamId Int

  homeCollege   College @relation("HomeMatches", fields: [homeCollegeId], references: [id])
  homeCollegeId Int

  awayCollege   College @relation("AwayMatches", fields: [awayCollegeId], references: [id])
  awayCollegeId Int

  status    MatchStatus @default(Scheduled)
  homeScore Int?
  awayScore Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Role {
  ADMIN
  USER
}

model Setting {
  id               String   @id @default(cuid())
  seasonLabel      String?
  googleMapsApiKey String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}



